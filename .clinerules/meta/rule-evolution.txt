---
description: Guidelines for continuously evolving Cline rules as new patterns emerge, with Copilot and project-specific standards.
globs: .clinerules/**/*.txt
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase
  - Copilot or project-specific standards change

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage
  - Ensure ES Modules, async/await, and other Copilot standards are followed

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge
    - Copilot or project standards are updated

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```javascript
  // If you see repeated patterns like:
  const button = document.getElementById('myButton');
  button.addEventListener('click', handleClick);

  // Consider adding a rule to ensure:
  // - Event listeners are added and removed consistently.
  // - ES Modules and async/await are used.
  // - Terminal commands are PowerShell compatible.
  ```

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules
  - Ensure Copilot and project standards are always reflected

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

---

## Implementation Instructions

1. Place this file at the indicated path inside `.clinerules/meta/`.
2. Run **“Cline: Reload Rules”** in VS Code or restart the Cline LSP/CLI so it picks up changes.
3. Edit the `globs` pattern above if your project structure differs.
4. Keep this guideline file under version control so the team shares the same conventions.

---
description: Guidelines for creating and maintaining Cline rules to ensure consistency, reflecting Copilot coding standards and current project structure.
globs: .clinerules/**/*.txt
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.clinerules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;

  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Copilot Coding Standards:**
  - Use ES Modules (`import …`) – never `require`.
  - Prefer async/await; avoid `.then` chains.
  - 2-space indentation, semicolons on, single quotes.
  - All SQL must be parameterised (use `pg` tagged templates).
  - Never log JWTs or secrets.
  - When using terminal commands, format for PowerShell.
  - When installing dependencies, ensure they are not installed within the application directory.
  - Add concise, annotated summaries for all changes.
  - Reference the main README.md for project context.

- **Project Structure (Current):**
  - `index.html`, `style.css`, `main.js`, `config.js`, `interaction.js`, `layoutConfig.js`, `poi.js`, `sceneSetup.js`, `stars.js`, `utils.js`, `logger.js`, `state.js`, `events.js`, `mobile.css`, `types.ts.bak`
  - `css/`: base.css, bottom-sheet.css, components.css, header-footer.css
  - `references/`: documentation and reference files

- **Web Interaction Patterns:**
  - All event listeners should be properly removed when no longer needed.
  - Rendering setup and animation logic should be separated.

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
  - Format commands for **PowerShell**.
  - When using tools to run commands or make edits, consolidate their uses as much as possible.
  - When analyzing and coming to a conclusion, include 1 or 2 sentences that explain the actions being taken.
  - When something is done, decide if it is a significant enough action to request an image be shared back for further analysis.
  - When editing files, consolidate changes per-file rather than per-rule.
  - Add a one-line summary of the actions taken in addition to each response for saving changes. Examples: "Changed the style of the button in the header to be more prominent"; "Fixed header to fit on screen". Separate multiple actions with a semicolon. If you opt to make a list of changes, include the one-line summary after the list. Do not include other parts of your response on this line.


---

## Implementation Instructions

1. Place this file at the indicated path inside `.clinerules/meta/`.
2. Run **“Cline: Reload Rules”** in VS Code or restart the Cline LSP/CLI so it picks up changes.
3. Edit the `globs` pattern above if your project structure differs.
4. Keep this guideline file under version control so the team shares the same conventions.
